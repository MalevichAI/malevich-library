from typing import Any

from malevich.square import DF, Context, processor, scheme
from pydantic import BaseModel

from ..functions import df_prompt_format


@scheme()
class Prompt(BaseModel):
    prompt: str

@processor()
def send_messages_with_dynamic_prompt(
    prompt_template: DF[Prompt], input_variables: DF[Any], context: Context
):
    """Send formatted messages to the AI Chatbot in a batch.

    Input:
        Two required inputs to this processor are:
            - input_variables: A dataframe with the variables to be used in the prompt template
            - prompt_template: A string with the prompt template

        For this processor, `prompt_template` is a dataframe with a single cell containing
        the prompt template. `input_variables` is a dataframe with the variables to be used
        in the prompt template.

        In this case, the prompt template is not a constant string defined in the app configuration.
        Instead, it is a dataframe with a single cell containing the prompt template. The prompt

    Configuration:
        The app is not configurable

    Details:
        Each row in the `input_variables` dataframe will be used to generate a single message
        to the AI Chatbot. The message will be generated by replacing the variables in the
        `prompt_template` with the values from the row. Messages will be sent to the AI Chatbot
        in a batch. The AI Chatbot will respond with a single message for each input message.
        The context is not shared between the messages: each message is processed independently.

    Output:
        A dataframe with the following columns:
            - result: AI Chatbot response to the input message

    Examples:
        Let's assume you want to come up with a name for your company services. You have
        a list of words that you want to use in the name. You want to generate a list of
        possible names by combining the words in different ways. You can use the following
        configuration:

        ```
        prompt_template:

        |                                            prompt                                                      |
        | -------------------------------------------------------------------------------------------------------|
        | Derive a name for our company services. The name should contain the word {word1} and the word {word2}. |


        input_variables:
        | word1 | word2 |
        |-------|-------|
        | power | energy|
        | red   | panda |
        ```

        The processor will generate the following messages:

            First message:
            ```
            Derive a name for our company services. The name should contain the word power and the word energy.
            ```

            Second message:
            ```
            Derive a name for our company services. The name should contain the word red and the word panda.
            ```

        Each message will be sent to the AI Chatbot. The AI Chatbot will respond with a single
        message for each input message. The messages will be returned as a dataframe with a single
        column `result`:

        ```
        | result |
        |--------|
        | Power Energy Services |
        | Red Panda Services    |
        ```


    Args:
        prompt_template (DF[str]): A dataframe with a single cell containing the prompt template
        input_variables (DF[Any]): A dataframe with the variables to be used in the prompt template

    Returns:
        DF[str]: A dataframe with the following columns:
            - result: AI Chatbot response to the input message
    """ # noqa: E501
    if len(prompt_template) > 1 or len(prompt_template.columns) > 1:
        raise ValueError(
            "The processor expects a prompt saved in a one-cell dataframe\n"
            f"Found: {len(prompt_template)} rows, "
            f"{len(prompt_template.columns)} columns"
        )

    prompt_str = prompt_template.iloc[0, 0]

    results = df_prompt_format(input_variables, prompt_str, context.common.chat_model)

    return results
