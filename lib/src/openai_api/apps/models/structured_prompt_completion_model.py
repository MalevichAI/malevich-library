# generated by datamodel-codegen:
#   filename:  structured_prompt_completion_model.json

from __future__ import annotations
from malevich.square import scheme

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


@scheme()
class StructuredPromptCompletion(BaseModel):
    openai_api_key: str = Field(..., description='Your OpenAI API key')
    user_prompt: str = Field(..., description='The prompt for the user')
    model: Optional[str] = Field('gpt-3.5-turbo', description='The model to use')
    organization: Optional[str] = Field(None, description='The organization to use')
    max_retries: Optional[int] = Field(3, description='The maximum number of retries')
    temperature: Optional[float] = Field(0.9, description='The temperature')
    max_tokens: Optional[int] = Field(150, description='The maximum number of tokens')
    top_p: Optional[float] = Field(1.0, description='The top p')
    frequency_penalty: Optional[float] = Field(0.0, description='The frequency penalty')
    presence_penalty: Optional[float] = Field(0.0, description='The presence penalty')
    stop: Optional[List] = Field([], description='The stop tokens')
    stream: Optional[bool] = Field(False, description='Whether to stream the response')
    n: Optional[int] = Field(1, description='The number of completions to generate')
    response_format: Optional[str] = Field(None, description='The response format')
    fields: Optional[Union[List, Dict[str, Any]]] = Field(
        None,
        description='A list of fields to parse the output. Each field is a dict that contains fields `name`, `description` and `type`',
    )
    include_index: Optional[bool] = Field(
        False, description='Whether to include the index in the output'
    )
