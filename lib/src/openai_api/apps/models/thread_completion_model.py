# generated by datamodel-codegen:
#   filename:  thread_completion_model.json

from __future__ import annotations
from malevich.square import scheme

from typing import Optional

from pydantic import BaseModel, Field


@scheme()
class ThreadCompletion(BaseModel):
    openai_api_key: str = Field(..., description='Your OpenAI API key')
    organization: Optional[str] = Field(None, description='The organization to use')
    max_retries: Optional[int] = Field(3, description='The maximum number of retries')
    temperature: Optional[float] = Field(0.9, description='The temperature')
    max_tokens: Optional[int] = Field(150, description='The maximum number of tokens')
    top_p: Optional[float] = Field(1.0, description='The top p')
