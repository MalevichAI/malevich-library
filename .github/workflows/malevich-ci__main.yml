name: Malevich Auto CI on main
on:
  push:
    branches: main
jobs:
  build_push:
    environment: main
    if: ${{ github.ref_type == 'branch' }} && ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - name: "Install aws cli"
      uses: unfor19/install-aws-cli-action@v1
    
    - name: Checkout
      uses: actions/checkout@v4
      with: 
          fetch-depth: 0
    
    - name: Docker Login
      run: |
        if [[ ${{ secrets.REGISTRY_TYPE }} == ecr* ]];
        then
          if [[ ${{ secrets.REGISTRY_TYPE}} == 'ecr-private' ]];
            then
              image_url=${{ secrets.REGISTRY_ID }}.dkr.ecr.us-east-1.amazonaws.com
            else
              image_url=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_ID }}
          fi
          echo 'Log in via AWS CLI'
          aws configure set aws_access_key_id ${{ secrets.IMAGE_USERNAME }}
          aws configure set aws_secret_access_key ${{ secrets.IMAGE_PASSWORD }}
          aws configure set region us-east-1
          if [[ ${{ secrets.REGISTRY_TYPE}} == 'ecr-private' ]];
          then
            token=$(aws ecr get-login-password)
          else
            token=$(aws ecr-public get-login-password)
          fi
          username=AWS
        else
          echo 'Default log in'
          username=${{ secrets.IMAGE_USERNAME }}
          token=${{ secrets.IMAGE_PASSWORD }}
          image_url=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_ID }}
        fi
        echo "$username" >> USERNAME
        echo "$token" >> PASSWORD
        echo $token | docker login --username $username --password-stdin $image_url || \
        { echo "::error::Failed to log in" ; exit 1 ;}
      id: docker_login
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Malevich
      run: |
        pip install "malevich-space" || { echo "::error::Failed to install malevich" ; exit 1 ;}
        pip install "malevich-coretools" || { echo "::error::Failed to install malevich-coretools" ; exit 1 ;}
    
    - name: Get branch name
      run: echo "branch=$(git branch --show-current)" >> $GITHUB_OUTPUT
      id: extract_branch
    
    - name: Build, Test and Push
      run: |
        if [[ ${{vars.MAIN_CMT}} !=  '' ]] && [[ $(git log ${{vars.MAIN_CMT}}) ]];
        then
          dirs=$(git log --name-only ${{vars.MAIN_CMT}}.. | grep '/' | cut -d '/' -f3 | sort -u)
        else
          dirs=$(git log --name-only -1 | grep '/' | cut -d '/' -f3 | sort -u)
        fi
        errors=()
        commit_sha=$(git rev-parse HEAD)
        if [[ ${dirs[0]} == "" ]];
        then
          echo "No changed directories, exiting..."
          exit 0
        fi
        if [[ ${{ secrets.REGISTRY_TYPE}} == 'ecr-private' ]];
        then
          image_url=${{ secrets.REGISTRY_ID }}.dkr.ecr.us-east-1.amazonaws.com
        else
          image_url=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_ID }}
        fi

        for dir in $dirs
        do
          dir=lib/src/$dir
          name=$(basename $dir)
          if [[ $dir != *.* ]] && [[ -e $dir ]] && [[ -f $dir/Dockerfile ]];
          then
            build_context=$dir
            build_file=$dir/Dockerfile
            if [[ -f $dir/.buildconf ]];
            then
              build_context=$( cat $dir/.buildconf | grep "BuildContext" || echo "context ${build_context}" )
              build_context=$( echo $build_context | cut -d ' ' -f2 )
              build_file=$( cat $dir/.buildconf | grep "BuildFile" || echo "file ${build_file}" )
              build_file=$( echo $build_file | cut -d ' ' -f2 )
            fi
            echo "Building ${name}"
            docker build -q -t $image_url/$name:$commit_sha -f $build_file $build_context || { echo "::warning::Failed to build ${name}" ; errors+=("${name}") ; continue ;}
            if [[ ${{ secrets.REGISTRY_TYPE}} == ecr* ]];
            then
              echo "Finding/Creating AWS repository"
              if [[ ${{ secrets.REGISTRY_TYPE}} == "ecr" ]];
              then
                aws ecr-public describe-repositories --repository-names $name > /dev/null || \
                aws ecr-public create-repository --repository-name $name > /dev/null 
              else
                aws ecr describe-repositories --repository-names $name > /dev/null || \
                aws ecr create-repository --repository-name $name > /dev/null
              fi
            fi  
            echo "Pushing ${name}"
            docker push -q --all-tags $image_url/$name || { echo "::warning::Failed to push ${name}" ; errors+=("${name}") ; continue ;}
            
            if [[ -f .github/workflows/app.py ]] && [[ -f $dir/space.yaml ]];
            then
              python3 .github/workflows/app.py --path "lib/src/${name}/space.yaml" --url "$image_url/$name:$commit_sha"
            else
              echo "::warning::${name} has no space.yaml"
            fi

            echo -n "Testing ${name} "  
            if [[ ${{ secrets.IMAGE_USERNAME }} == "$(cat USERNAME)" ]] && [[ ${{ secrets.IMAGE_PASSWORD}} == "$(cat PASSWORD)" ]];
            then
              echo "with credentials"
              echo "::debug::Commit Message - $(git log --format=%B -1 $commit_sha)"
              space ci report ./$dir ${{ steps.extract_branch.outputs.branch }} \
              $commit_sha "$(git log --format=%B -1 $commit_sha)" done \
              $image_url/$name:$commit_sha \
              --image-user=$(cat USERNAME) --image-token=$(cat PASSWORD) \
              --space-username=${{ secrets.SPACE_USERNAME }} --space-password=${{ secrets.SPACE_PASSWORD }} --space-org=${{ secrets.ORG_ID }} \
              ${{ secrets.API_URL }} || { echo "::warning::Failed to report" ; errors+=("${name}") ;}
            else
              echo "without credentials"
              echo "::debug::Commit Message - $(git log --format=%B -1 $commit_sha)"
              space ci report ./$dir ${{ steps.extract_branch.outputs.branch }} \
              $commit_sha "$(git log --format=%B -1 $commit_sha)" done \
              $image_url/$name:$commit_sha \
              --space-username=${{ secrets.SPACE_USERNAME }} --space-password=${{ secrets.SPACE_PASSWORD }} --space-org=${{ secrets.ORG_ID }} \
              ${{ secrets.API_URL }} || { echo "::warning::Failed to report ${name}" ; errors+=("${name}") ;}
            fi  
            echo "Tagging ${name} as latest and pushing"
            docker tag $image_url/$name:$commit_sha $image_url/$name:latest
            docker push -q --all-tags $image_url/$name || { echo "::warning::Failed to push ${name} as latest" ; errors+=("${name}") ; continue ;}
          fi
        done
        if [[ ${#errors[@]} > 0 ]];
        then
          echo "::error::Failed apps: ${errors[@]}"
        fi

    - run: |
        curl -L \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.ENV_TOKEN}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository}}/actions/variables/MAIN_CMT \
          -d '{"name":"MAIN_CMT","value":"${{github.sha}}"}'
        rm USERNAME
        rm PASSWORD
        docker logout
